void	cast_one_ray(float ray_angle, int stripId)
{
	// "constructor methods"
	normalize_angle(&ray_angle);

	// Starts at 3 oclock and goes clockwise. 
	// int is_ray_facing_down = ray_angle > 0 && ray_angle < M_PI;
	// int is_ray_facing_up = !is_ray_facing_down;
	// int is_ray_facing_right = ray_angle < (M_PI / 2) || ray_angle > (M_PI * 1.5);
	// int is_ray_facing_left = !is_ray_facing_right;

	float xstep;
	float ystep;
	float xintercept;
	float yintercept;
	t_wall_hit	params;

	wall_hit_params(&params);

	//////////////////////////////////////////////
	// Horizintal ray grid intersection code.
	//////////////////////////////////////////////

	int foundHorzWallHit = false;
	float horzwall_hit_x = 0;
	float horzwall_hit_y = 0;
	int horz_wall_content = 0;

	// Find the y-coordinate of the closet horizontal grid intersection.  
	yintercept = floor(t_player.y / TILE_SIZE) * TILE_SIZE;
	yintercept += (is_ray_facing_down(ray_angle) ? TILE_SIZE : 0);

	// Find the x coordinate of the closest horizontal grid intersection
	xintercept = t_player.x + (yintercept - t_player.y) / tan(ray_angle);

	// Calculate the increment for xstep and ystep.
	calculate_steps(ray_angle, &xstep, &ystep, 'x');
	// Ask is that a wall for each ystep and xstep, if yes, get the distance, but therei s a catch....
	float nextHorzTouchX = xintercept;
	float nextHorzTouchY = yintercept;

	//Inc xstep and ystep until wall is found
	while (is_inside_map(nextHorzTouchX, nextHorzTouchY))
	{
		// ...We must check one beyond
		float xToCheck = nextHorzTouchX;
		float yToCheck = nextHorzTouchY + (is_ray_facing_up(ray_angle) ? -1 : 0);

		if (map_content_at(xToCheck, yToCheck) == 1)
		{
			foundHorzWallHit = true;
			horzwall_hit_x = nextHorzTouchX;
			horzwall_hit_y = nextHorzTouchY;
			horz_wall_content = map_content_at((yToCheck / TILE_SIZE), (xToCheck / TILE_SIZE) );
			// horz_wall_content = map[ (int)floor(yToCheck / TILE_SIZE) ][ (int)floor(xToCheck / TILE_SIZE) ];
			break ;
		}
		else
		{
			nextHorzTouchX += xstep;
			nextHorzTouchY += ystep;
		}
	}

	//////////////////////////////////////////////
	// Vertical ray grid intersection code.
	//////////////////////////////////////////////
	int foundVertWallHit = false;
	float vertwall_hit_x = 0;
	float vertwall_hit_y = 0;
	int vertwall_content = 0;

	// Find the x-coordinate of the closet horizontal grid intersection.  
	xintercept = floor(t_player.x / TILE_SIZE) * TILE_SIZE;
	xintercept += (is_ray_facing_right(ray_angle) ? TILE_SIZE : 0);

	// Find the y coordinate of the closest horizontal grid intersection
	yintercept = t_player.y + (xintercept - t_player.x) * tan(ray_angle);

	// Calculate the increment for ystep and xstep.
	calculate_steps(ray_angle, &xstep, &ystep, 'y');
	// Ask is that a wall for each ystep and xstep, if yes, get the distance, but therei s a catch....
	float nextVertTouchX = xintercept;
	float nextVertTouchY = yintercept;

	//Inc xstep and ystep until wall is found
	while (is_inside_map(nextVertTouchX, nextVertTouchY))
	{
		// ...We must check one beyond
		float xToCheck = nextVertTouchX + (is_ray_facing_left(ray_angle) ? -1 : 0);
		float yToCheck = nextVertTouchY;

		if (map_content_at(xToCheck, yToCheck) == 1)
		{
			foundVertWallHit = true;
			vertwall_hit_x = nextVertTouchX;
			vertwall_hit_y = nextVertTouchY;
			vertwall_content = map_content_at((yToCheck / TILE_SIZE), (xToCheck / TILE_SIZE));
			// vertwall_content = map[ (int)floor(yToCheck / TILE_SIZE) ][ (int)floor(xToCheck / TILE_SIZE) ];
			break ;
		}
		else
		{
			nextVertTouchX += xstep;
			nextVertTouchY += ystep;
		}
	}
	
	// Calculate both horizontal and vertical distances and choose the smaller.
	float horzHitDistance = (foundHorzWallHit
		? distance_between_points(t_player.x, t_player.y, horzwall_hit_x, horzwall_hit_y)
		: FLT_MAX);

	float vertHitDistance = (foundVertWallHit
		? distance_between_points(t_player.x, t_player.y, vertwall_hit_x, vertwall_hit_y)
		: FLT_MAX);

	// Only store the smallest of the distances and x and y. 
	if (vertHitDistance < horzHitDistance)
	{
		g_rays[stripId].distance = vertHitDistance;
		g_rays[stripId].wall_hit_x = vertwall_hit_x;
		g_rays[stripId].wall_hit_y = vertwall_hit_y;
		g_rays[stripId].wall_hit_content = vertwall_content;
		g_rays[stripId].was_hit_vertical = true;
	}
	else
	{
		g_rays[stripId].distance = horzHitDistance;
		g_rays[stripId].wall_hit_x = horzwall_hit_x;
		g_rays[stripId].wall_hit_y = horzwall_hit_y;
		g_rays[stripId].wall_hit_content = horz_wall_content;
		g_rays[stripId].was_hit_vertical = false;
	}
	g_rays[stripId].ray_angle = ray_angle;
	g_rays[stripId].is_ray_facing_down = is_ray_facing_down(ray_angle);
	g_rays[stripId].is_ray_facing_up = is_ray_facing_up(ray_angle);
	g_rays[stripId].is_ray_facing_left = is_ray_facing_left(ray_angle);
	g_rays[stripId].is_ray_facing_right = is_ray_facing_right(ray_angle);
}